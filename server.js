const express = require('express');
const cors = require('cors');
const rateLimit = require('express-rate-limit');

const app = express();
const PORT = process.env.PORT || 3001;

// YOUR CLICKSEND CREDENTIALS - Replace with your actual credentials
const CLICKSEND_USERNAME = 'yardie524@gmail.com';  // Your ClickSend username
const CLICKSEND_API_KEY = '26985186-F808-EBBB-C1B9-4D73CD20D803';  // Your actual API key

// Middleware
app.use(express.json());
app.use(cors({
  origin: true,
  credentials: true
}));

// Rate limiting to prevent abuse
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // Limit each IP to 5 emergency requests per 15 minutes
  message: { 
    error: 'Too many emergency requests from this IP. Please wait before sending another alert.',
    retryAfter: '15 minutes'
  }
});
app.use('/api/sms', limiter);

// Root endpoint
app.get('/', (req, res) => {
  res.json({ 
    message: 'SafetyCheck Emergency Alert System',
    status: 'ready',
    timestamp: new Date().toISOString(),
    info: 'Centralized emergency SMS service - no API keys required for users'
  });
});

// Health check
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'healthy', 
    service: 'SafetyCheck Emergency Backend',
    timestamp: new Date().toISOString(),
    smsService: 'ClickSend ready'
  });
});

// Emergency SMS endpoint - No user credentials required
app.post('/api/sms/emergency', async (req, res) => {
  try {
    console.log('🚨 Emergency SMS request received');
    
    const { contacts, location, userInfo } = req.body;
    
    // Validate required fields
    if (!contacts || !Array.isArray(contacts)) {
      return res.status(400).json({
        success: false,
        error: 'Emergency contacts are required'
      });
    }

    if (contacts.length === 0) {
      return res.status(400).json({
        success: false,
        error: 'At least one emergency contact is required'
      });
    }

    // Validate phone numbers
    for (const contact of contacts) {
      if (!contact.phone || !contact.phone.startsWith('+')) {
        return res.status(400).json({
          success: false,
          error: `Invalid phone number for ${contact.name}. Must include country code (e.g., +1234567890)`
        });
      }
    }

    // Check if ClickSend credentials are configured
    if (!CLICKSEND_USERNAME || !CLICKSEND_API_KEY || CLICKSEND_API_KEY === 'YOUR_API_KEY_HERE') {
      return res.status(500).json({
        success: false,
        error: 'SMS service not configured. Please contact the app administrator.'
      });
    }

    console.log('📍 Raw request body:', JSON.stringify(req.body, null, 2));
    console.log('📍 Location data received:', JSON.stringify(location, null, 2));
    console.log('📍 Location type check:', {
      hasLocation: !!location,
      locationIsObject: typeof location === 'object',
      hasLat: location && 'lat' in location,
      hasLng: location && 'lng' in location,
      latValue: location?.lat,
      lngValue: location?.lng,
      latType: typeof location?.lat,
      lngType: typeof location?.lng
    });
    
    // Prepare location text with better validation and direct coordinate access
    let locationText;
    
    if (location && 
        location.lat !== null && 
        location.lat !== undefined && 
        location.lng !== null && 
        location.lng !== undefined &&
        !isNaN(location.lat) && 
        !isNaN(location.lng)) {
      
      const lat = Number(location.lat);
      const lng = Number(location.lng);
      
      locationText = `Google Maps: https://maps.google.com/maps?q=${lat},${lng}
Coordinates: ${lat.toFixed(6)}, ${lng.toFixed(6)}
Accuracy: ${location.accuracy ? Math.round(Number(location.accuracy)) + ' meters' : 'Unknown'}
Timestamp: ${new Date().toLocaleString()}`;
      
      console.log('✅ Using location data - Lat:', lat, 'Lng:', lng);
    } else {
      locationText = `Location data not available - GPS coordinates could not be determined
Emergency occurred at: ${new Date().toLocaleString()}
Please contact them immediately to determine their current location`;
      
      console.log('❌ Invalid location data:', {
        location,
        lat: location?.lat,
        lng: location?.lng
      });
    }

    // Create emergency message
    const emergencyMessage = `EMERGENCY SAFETY ALERT

Your emergency contact has failed to respond to their safety check-in and may require immediate assistance.

CURRENT LOCATION:
${locationText}

REQUIRED ACTION:
- Contact them immediately by phone
- If unreachable, consider contacting local emergency services
- Check their last known location using the coordinates above

This alert was automatically generated by SafetyCheck Emergency App at ${new Date().toLocaleString()}

Time is critical - please respond now.`;

    const results = [];
    let successCount = 0;
    let failCount = 0;

    // Send to each contact using centralized credentials
    for (const contact of contacts) {
      try {
        console.log(`📤 Sending emergency alert to ${contact.name} (${contact.phone})`);
        
        const response = await fetch('https://rest.clicksend.com/v3/sms/send', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Basic ' + Buffer.from(CLICKSEND_USERNAME + ':' + CLICKSEND_API_KEY).toString('base64')
          },
          body: JSON.stringify({
            messages: [
              {
                to: contact.phone,
                body: emergencyMessage,
                source: 'SafetyCheck-Emergency'
              }
            ]
          })
        });

        const result = await response.json();

        if (response.ok && result.http_code === 200) {
          const message = result.data.messages[0];
          results.push({
            contact: contact.name,
            phone: contact.phone,
            status: 'success',
            messageId: message.message_id,
            cost: message.message_price
          });
          successCount++;
          console.log(`✅ Emergency SMS sent to ${contact.name} - Message ID: ${message.message_id}`);
        } else {
          results.push({
            contact: contact.name,
            phone: contact.phone,
            status: 'failed',
            error: result.response_msg || 'Unknown ClickSend error'
          });
          failCount++;
          console.log(`❌ Failed to send to ${contact.name}:`, result.response_msg);
        }

      } catch (error) {
        results.push({
          contact: contact.name,
          phone: contact.phone,
          status: 'failed',
          error: 'Network error: ' + error.message
        });
        failCount++;
        console.log(`❌ Network error sending to ${contact.name}:`, error.message);
      }
    }

    // Log emergency alert for monitoring
    console.log(`🚨 EMERGENCY ALERT SUMMARY:`);
    console.log(`   Location: ${location ? `${location.lat}, ${location.lng}` : 'Unknown'}`);
    console.log(`   Contacts notified: ${successCount}/${contacts.length}`);
    console.log(`   Timestamp: ${new Date().toISOString()}`);

    res.json({
      success: successCount > 0,
      summary: {
        total: contacts.length,
        sent: successCount,
        failed: failCount
      },
      results: results
    });

  } catch (error) {
    console.error('❌ Emergency SMS system error:', error);
    res.status(500).json({
      success: false,
      error: 'Emergency alert system temporarily unavailable. Please try again or contact emergency services directly.'
    });
  }
});

// Block test endpoint completely
app.post('/api/sms/test', (req, res) => {
  res.status(403).json({
    success: false,
    error: 'Test messaging not available. This system is for emergency alerts only.'
  });
});

// Global error handling
app.use((error, req, res, next) => {
  console.error('❌ Server error:', error);
  res.status(500).json({
    success: false,
    error: 'Internal system error'
  });
});

// Start server
app.listen(PORT, () => {
  console.log(`🚀 SafetyCheck Emergency Backend running on port ${PORT}`);
  console.log(`📡 Health check: http://localhost:${PORT}/api/health`);
  console.log(`🚨 Emergency SMS endpoint: POST http://localhost:${PORT}/api/sms/emergency`);
  console.log(`🔐 Using centralized ClickSend credentials: ${CLICKSEND_USERNAME}`);
  console.log(`⚠️  EMERGENCY ALERTS ONLY - No user credentials required`);
});

module.exports = app;
